(let ((.cse2 (f x)) (.cse1 (f y)) (.cse0 (+ x 1))) (let ((.cse15 (= .cse1 .cse0)) (.cse9 (= x y)) (.cse12 (= x .cse2))) (let ((.cse13 (not .cse12)) (.cse10 (not .cse9)) (.cse16 (not .cse15))) (let ((.cse6 (! .cse9 :quotedCC)) (.cse4 (! .cse12 :quotedCC)) (.cse7 (! (let ((.cse17 (and .cse12 .cse9 .cse15))) (@eq (@asserted .cse17) (@rewrite (! (= .cse17 (not (or .cse13 .cse10 .cse16))) :andToOr)))) :notOr)) (.cse3 (! .cse15 :quotedCC))) (@res (let ((.cse5 (! (= .cse1 .cse2) :quotedCC))) (@res (@lemma (! (or (not .cse3) (not .cse4) (not .cse5)) :CC ((! (= .cse0 x) :quotedCC) :subpath (.cse0 .cse1 .cse2 x)))) (! (@lemma (! (or .cse5 (not .cse6)) :CC (.cse5 :subpath (.cse1 .cse2)))) :pivot .cse5))) (! (@clause (@eq (let ((.cse8 (not .cse10))) (@eq (@split .cse7 .cse8) (@rewrite (! (= .cse8 .cse9) :notSimp)))) (@rewrite (! (= .cse9 .cse6) :intern))) (! .cse6 :input)) :pivot .cse6) (! (@clause (@eq (let ((.cse11 (not .cse13))) (@eq (@split .cse7 .cse11) (@rewrite (! (= .cse11 .cse12) :notSimp)))) (@rewrite (! (= .cse12 .cse4) :intern))) (! .cse4 :input)) :pivot .cse4) (! (@clause (@eq (let ((.cse14 (not .cse16))) (@eq (@split .cse7 .cse14) (@rewrite (! (= .cse14 .cse15) :notSimp)))) (@rewrite (! (= .cse15 .cse3) :intern))) (! .cse3 :input)) :pivot .cse3))))))
